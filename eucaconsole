#!/usr/bin/python -tt

import sys
from pkg_resources import load_entry_point
sys.path.insert(0, '/usr/lib/python2.7/site-packages/Beaker-1.8.1-py2.7.egg')

# EUCA-5030 is solved by clearning this environment variable immediately.
# this prevents boto from printing a warning if this env variable isn't set to a valid path
import os
if 'AWS_CREDENTIAL_FILE' in os.environ:
    del os.environ['AWS_CREDENTIAL_FILE']

import atexit
import fcntl
import getopt
import logging
import signal
import time

pid_file = "/var/run/eucaconsole.pid"
config_file = "/etc/eucaconsole/console.ini"
log_file = "/var/log/eucaconsole_startup.log"

procid = 0

def daemonize(func=None):
    # Fork process
    procid = os.fork()
    if procid < 0:
        sys.exit(1)
    elif procid > 0:
        sys.exit(0)
    procid = os.setsid()
    if procid == -1:
        sys.exit(1)

    # close input descriptor and point it to /dev/null
    os.close(0)
    os.open("/dev/null", os.O_RDWR)
    # output descriptors point to log file
    f = os.open(log_file, os.O_WRONLY|os.O_APPEND)
    os.dup2(f, 1)
    os.dup2(f, 2)

    os.umask(027)
    os.chdir("/")

    # Create pidfile
    try:
        f = open(pid_file, "w")
        fcntl.lockf(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
        f.write(str(os.getpid()))
        f.flush()
    except IOError:
        sys.exit(1)

    signal.signal(signal.SIGTERM, cleanpid)
    atexit.register(cleanpid)

    if func:
        func()


def cleanpid(signum=None, action=None):
    if os.getpgid(procid) == 1:
        os.remove(pid_file)
        sys.exit(0)


def start_console():
    args = ['pserve', config_file, 'worker_class=eventlet']
    sys.exit(
        load_entry_point('pyramid', 'console_scripts', 'pserve')(args)
    )


def usage():
    print """
    %s [-d | --daemonize] [-l <log file> | --logfile <log file>] [-c <config file> | --config <config file>] [-p <pid file> | --pidfile <pid file>]

    """ % (os.path.basename(sys.argv[0]))
    sys.exit(1)


if __name__ == "__main__":

    daemon = False
    try:
        opts, _ = getopt.getopt(sys.argv[1:],
            "hdl:c:p:", ["help", "daemonize", "logfile=", "config=", "pidfile="])
        for arg, value in opts:
            if arg == "-d" or arg == "--daemonize":
                daemon = True
            elif arg == "-p" or arg == "--pidfile":
                pid_file = value
            elif arg == "-l" or arg == "--logfile":
                log_file = value
            elif arg == "-c" or arg == "--config":
                config_file = value
            elif arg == "-h" or arg == "--help":
                usage()
    except getopt.GetoptError:
        usage()

    if daemon:
        daemonize(start_console)
    else:
        try:
            logging.info("Starting Eucalyptus Console")
            start_console()
        except KeyboardInterrupt:
            logging.info("Interrupted By User")
            sys.exit(0)

